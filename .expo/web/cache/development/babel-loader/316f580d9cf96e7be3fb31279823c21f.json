{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/lifangdi/workspace/travelTogeher/lib/react-native-svg-uri/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, PropTypes } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport xmldom from 'xmldom';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\nimport Svg, { Circle, Ellipse, G, LinearGradient, RadialGradient, Line, Path, Polygon, Polyline, Rect, Symbol, Use, Defs, Stop } from 'react-native-svg';\nimport * as utils from \"./utils\";\nvar ACEPTED_SVG_ELEMENTS = ['svg', 'g', 'circle', 'path', 'rect', 'linearGradient', 'radialGradient', 'stop', 'ellipse', 'polygon'];\nvar SVG_ATTS = ['viewBox'];\nvar G_ATTS = ['id'];\nvar CIRCLE_ATTS = ['cx', 'cy', 'r', 'fill', 'stroke'];\nvar PATH_ATTS = ['d', 'fill', 'stroke'];\nvar RECT_ATTS = ['width', 'height', 'fill', 'stroke', 'x', 'y'];\nvar LINEARG_ATTS = ['id', 'x1', 'y1', 'x2', 'y2'];\nvar RADIALG_ATTS = ['id', 'cx', 'cy', 'r'];\nvar STOP_ATTS = ['offset'];\nvar ELLIPSE_ATTS = ['fill', 'cx', 'cy', 'rx', 'ry'];\nvar POLYGON_ATTS = ['points'];\nvar ind = 0;\n\nvar SvgUri = function (_Component) {\n  _inherits(SvgUri, _Component);\n\n  function SvgUri(props) {\n    var _this;\n\n    _classCallCheck(this, SvgUri);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SvgUri).call(this, props));\n    _this.state = {\n      svgXmlData: props.svgXmlData\n    };\n    _this.createSVGElement = _this.createSVGElement.bind(_assertThisInitialized(_this));\n    _this.obtainComponentAtts = _this.obtainComponentAtts.bind(_assertThisInitialized(_this));\n    _this.inspectNode = _this.inspectNode.bind(_assertThisInitialized(_this));\n    _this.fecthSVGData = _this.fecthSVGData.bind(_assertThisInitialized(_this));\n    _this.isComponentMounted = false;\n\n    if (props.source) {\n      var source = resolveAssetSource(props.source) || {};\n\n      _this.fecthSVGData(source.uri);\n    }\n\n    return _this;\n  }\n\n  _createClass(SvgUri, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.isComponentMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isComponentMounted = false;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.source) {\n        var source = resolveAssetSource(nextProps.source) || {};\n        var oldSource = resolveAssetSource(this.props.source) || {};\n\n        if (source.uri !== oldSource.uri) {\n          this.fecthSVGData(source.uri);\n        }\n      }\n    }\n  }, {\n    key: \"fecthSVGData\",\n    value: function fecthSVGData(uri) {\n      var responseXML, response;\n      return _regeneratorRuntime.async(function fecthSVGData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              responseXML = null;\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(uri));\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(response.text());\n\n            case 7:\n              responseXML = _context.sent;\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.error(\"ERROR SVG\", _context.t0);\n\n            case 13:\n              _context.prev = 13;\n\n              if (this.isComponentMounted) {\n                this.setState({\n                  svgXmlData: responseXML\n                });\n              }\n\n              return _context.finish(13);\n\n            case 16:\n              return _context.abrupt(\"return\", responseXML);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 10, 13, 16]], Promise);\n    }\n  }, {\n    key: \"createSVGElement\",\n    value: function createSVGElement(node, childs) {\n      var componentAtts = {};\n      var i = ind++;\n\n      switch (node.nodeName) {\n        case 'svg':\n          componentAtts = this.obtainComponentAtts(node, SVG_ATTS);\n          if (this.props.width) componentAtts.width = this.props.width;\n          if (this.props.height) componentAtts.height = this.props.height;\n          return React.createElement(Svg, _extends({\n            key: i\n          }, componentAtts, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            }\n          }), childs);\n\n        case 'g':\n          componentAtts = this.obtainComponentAtts(node, G_ATTS);\n          return React.createElement(G, _extends({\n            key: i\n          }, componentAtts, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            }\n          }), childs);\n\n        case 'path':\n          componentAtts = this.obtainComponentAtts(node, PATH_ATTS);\n          return React.createElement(Path, _extends({\n            key: i\n          }, componentAtts, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            }\n          }), childs);\n\n        case 'circle':\n          componentAtts = this.obtainComponentAtts(node, CIRCLE_ATTS);\n          return React.createElement(Circle, _extends({\n            key: i\n          }, componentAtts, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            }\n          }), childs);\n\n        case 'rect':\n          componentAtts = this.obtainComponentAtts(node, RECT_ATTS);\n          return React.createElement(Rect, _extends({\n            key: i\n          }, componentAtts, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136\n            }\n          }), childs);\n\n        case 'linearGradient':\n          componentAtts = this.obtainComponentAtts(node, LINEARG_ATTS);\n          return React.createElement(Defs, {\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            }\n          }, React.createElement(LinearGradient, _extends({}, componentAtts, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            }\n          }), childs));\n\n        case 'radialGradient':\n          componentAtts = this.obtainComponentAtts(node, RADIALG_ATTS);\n          return React.createElement(Defs, {\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            }\n          }, React.createElement(RadialGradient, _extends({}, componentAtts, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            }\n          }), childs));\n\n        case 'stop':\n          componentAtts = this.obtainComponentAtts(node, STOP_ATTS);\n          return React.createElement(Stop, _extends({\n            key: i\n          }, componentAtts, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145\n            }\n          }), childs);\n\n        case 'ellipse':\n          componentAtts = this.obtainComponentAtts(node, ELLIPSE_ATTS);\n          return React.createElement(Ellipse, _extends({\n            key: i\n          }, componentAtts, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            }\n          }), childs);\n\n        case 'polygon':\n          componentAtts = this.obtainComponentAtts(node, POLYGON_ATTS);\n          return React.createElement(Polygon, _extends({\n            key: i\n          }, componentAtts, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151\n            }\n          }), childs);\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"obtainComponentAtts\",\n    value: function obtainComponentAtts(_ref, enabledAttributes) {\n      var _this2 = this;\n\n      var attributes = _ref.attributes;\n      var styleAtts = {};\n      Array.from(attributes).forEach(function (_ref2) {\n        var nodeName = _ref2.nodeName,\n            nodeValue = _ref2.nodeValue;\n\n        _extends(styleAtts, utils.transformStyle(nodeName, nodeValue, _this2.props.fill));\n      });\n      var componentAtts = Array.from(attributes).map(utils.camelCaseNodeName).map(utils.removePixelsFromNodeValue).filter(utils.getEnabledAttributes(enabledAttributes)).reduce(function (acc, _ref3) {\n        var nodeName = _ref3.nodeName,\n            nodeValue = _ref3.nodeValue;\n        return _objectSpread({}, acc, _defineProperty({}, nodeName, _this2.props.fill && nodeName === 'fill' ? _this2.props.fill : nodeValue));\n      }, {});\n\n      _extends(componentAtts, styleAtts);\n\n      return componentAtts;\n    }\n  }, {\n    key: \"inspectNode\",\n    value: function inspectNode(node) {\n      var arrayElements = [];\n      if (!ACEPTED_SVG_ELEMENTS.includes(node.nodeName)) return null;\n\n      if (node.childNodes && node.childNodes.length > 0) {\n        for (var i = 0; i < node.childNodes.length; i++) {\n          var nodo = this.inspectNode(node.childNodes[i]);\n          if (nodo != null) arrayElements.push(nodo);\n        }\n      }\n\n      var element = this.createSVGElement(node, arrayElements);\n      return element;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      try {\n        if (this.state.svgXmlData == null) return null;\n        var inputSVG = this.state.svgXmlData.substring(this.state.svgXmlData.indexOf(\"<svg \"), this.state.svgXmlData.indexOf(\"</svg>\") + 6);\n        var doc = new xmldom.DOMParser().parseFromString(inputSVG);\n        var rootSVG = this.inspectNode(doc.childNodes[0]);\n        return React.createElement(View, {\n          style: this.props.style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          }\n        }, rootSVG);\n      } catch (e) {\n        console.error(\"ERROR SVG\", e);\n        return null;\n      }\n    }\n  }]);\n\n  return SvgUri;\n}(Component);\n\nSvgUri.propTypes = {\n  fill: PropTypes.string\n};\nmodule.exports = SvgUri;","map":{"version":3,"sources":["/Users/lifangdi/workspace/travelTogeher/lib/react-native-svg-uri/index.js"],"names":["React","Component","PropTypes","xmldom","resolveAssetSource","Svg","Circle","Ellipse","G","LinearGradient","RadialGradient","Line","Path","Polygon","Polyline","Rect","Symbol","Use","Defs","Stop","utils","ACEPTED_SVG_ELEMENTS","SVG_ATTS","G_ATTS","CIRCLE_ATTS","PATH_ATTS","RECT_ATTS","LINEARG_ATTS","RADIALG_ATTS","STOP_ATTS","ELLIPSE_ATTS","POLYGON_ATTS","ind","SvgUri","props","state","svgXmlData","createSVGElement","bind","obtainComponentAtts","inspectNode","fecthSVGData","isComponentMounted","source","uri","nextProps","oldSource","responseXML","fetch","response","text","console","error","setState","node","childs","componentAtts","i","nodeName","width","height","enabledAttributes","attributes","styleAtts","Array","from","forEach","nodeValue","transformStyle","fill","map","camelCaseNodeName","removePixelsFromNodeValue","filter","getEnabledAttributes","reduce","acc","arrayElements","includes","childNodes","length","nodo","push","element","inputSVG","substring","indexOf","doc","DOMParser","parseFromString","rootSVG","style","e","propTypes","string","module","exports"],"mappings":"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","sourcesContent":["/*\n * @Date: 2020-03-19 02:38:05\n * @LastEditors: lifangdi\n * @LastEditTime: 2020-03-19 02:38:06\n */\n'use strict';\nimport React, {Component, PropTypes} from \"react\";\nimport {View} from 'react-native';\nimport xmldom from 'xmldom';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\nimport Svg,{\n    Circle,\n    Ellipse,\n    G ,\n    LinearGradient,\n    RadialGradient,\n    Line,\n    Path,\n    Polygon,\n    Polyline,\n    Rect,\n    Symbol,\n    Use,\n    Defs,\n    Stop\n} from 'react-native-svg';\n\nimport * as utils from './utils';\n\nconst ACEPTED_SVG_ELEMENTS = [\n  'svg',\n  'g',\n  'circle',\n  'path',\n  'rect',\n  'linearGradient',\n  'radialGradient',\n  'stop',\n  'ellipse',\n  'polygon'\n];\n\n// Attributes from SVG elements that are mapped directly.\nconst SVG_ATTS = ['viewBox'];\nconst G_ATTS = ['id'];\nconst CIRCLE_ATTS = ['cx', 'cy', 'r', 'fill', 'stroke'];\nconst PATH_ATTS = ['d', 'fill', 'stroke'];\nconst RECT_ATTS = ['width', 'height', 'fill', 'stroke', 'x', 'y'];\nconst LINEARG_ATTS = ['id', 'x1', 'y1', 'x2', 'y2'];\nconst RADIALG_ATTS = ['id', 'cx', 'cy', 'r'];\nconst STOP_ATTS = ['offset'];\nconst ELLIPSE_ATTS = ['fill', 'cx', 'cy', 'rx', 'ry'];\nconst POLYGON_ATTS = ['points'];\n\nlet ind = 0;\n\nclass SvgUri extends Component{\n\n\tconstructor(props){\n\t\tsuper(props);\n\n    this.state = {svgXmlData: props.svgXmlData};\n\n    this.createSVGElement     = this.createSVGElement.bind(this);\n    this.obtainComponentAtts  = this.obtainComponentAtts.bind(this);\n    this.inspectNode          = this.inspectNode.bind(this);\n    this.fecthSVGData         = this.fecthSVGData.bind(this);\n\n    this.isComponentMounted   = false;\n\n    // Gets the image data from an URL or a static file\n    if (props.source) {\n        const source = resolveAssetSource(props.source) || {};\n        this.fecthSVGData(source.uri);\n    }\n\t}\n\n  componentWillMount() {\n      this.isComponentMounted = true;\n  }\n\n  componentWillUnmount() {\n      this.isComponentMounted = false\n  }\n\n  componentWillReceiveProps (nextProps){\n    if (nextProps.source) {\n        const source = resolveAssetSource(nextProps.source) || {};\n        const oldSource = resolveAssetSource(this.props.source) || {};\n        if(source.uri !== oldSource.uri){\n            this.fecthSVGData(source.uri);\n        }\n    }\n  }\n\n  async fecthSVGData(uri){\n     let responseXML = null;\n     try {\n         let response = await fetch(uri);\n         responseXML = await response.text();\n     } catch(e) {\n        console.error(\"ERROR SVG\", e);\n     }finally {\n      \tif (this.isComponentMounted) {\n      \t     this.setState({svgXmlData:responseXML});\n      \t}\n     }\n\n     return responseXML;\n  }\n\n  createSVGElement(node, childs){\n        let componentAtts = {};\n        let i = ind++;\n        switch (node.nodeName) {\n        case 'svg':\n             componentAtts = this.obtainComponentAtts(node, SVG_ATTS);\n             if (this.props.width)\n                componentAtts.width = this.props.width;\n             if (this.props.height)\n                componentAtts.height = this.props.height;\n\n             return <Svg key={i} {...componentAtts}>{childs}</Svg>;\n        case 'g':\n             componentAtts = this.obtainComponentAtts(node, G_ATTS);\n            return <G key={i} {...componentAtts}>{childs}</G>;\n        case 'path':\n             componentAtts = this.obtainComponentAtts(node, PATH_ATTS);\n            return <Path key={i} {...componentAtts}>{childs}</Path>;\n        case 'circle':\n             componentAtts = this.obtainComponentAtts(node, CIRCLE_ATTS);\n            return <Circle key={i} {...componentAtts}>{childs}</Circle>;\n        case 'rect':\n             componentAtts = this.obtainComponentAtts(node, RECT_ATTS);\n            return <Rect key={i} {...componentAtts}>{childs}</Rect>;\n        case 'linearGradient':\n             componentAtts = this.obtainComponentAtts(node, LINEARG_ATTS);\n            return <Defs key={i}><LinearGradient {...componentAtts}>{childs}</LinearGradient></Defs>;\n        case 'radialGradient':\n             componentAtts = this.obtainComponentAtts(node, RADIALG_ATTS);\n            return <Defs key={i}><RadialGradient {...componentAtts}>{childs}</RadialGradient></Defs>;\n        case 'stop':\n             componentAtts = this.obtainComponentAtts(node, STOP_ATTS);\n            return <Stop key={i} {...componentAtts}>{childs}</Stop>;\n        case 'ellipse':\n             componentAtts = this.obtainComponentAtts(node, ELLIPSE_ATTS);\n            return <Ellipse key={i} {...componentAtts}>{childs}</Ellipse>;\n        case 'polygon':\n             componentAtts = this.obtainComponentAtts(node, POLYGON_ATTS);\n            return <Polygon key={i} {...componentAtts}>{childs}</Polygon>;\n        default:\n          return null;\n        }\n  }\n\n  obtainComponentAtts({attributes}, enabledAttributes) {\n    let styleAtts = {};\n    Array.from(attributes).forEach(({nodeName, nodeValue}) => {\n                Object.assign(styleAtts, utils.transformStyle(nodeName, nodeValue, this.props.fill));\n    });\n\n    let componentAtts =  Array.from(attributes)\n      .map(utils.camelCaseNodeName)\n      .map(utils.removePixelsFromNodeValue)\n      .filter(utils.getEnabledAttributes(enabledAttributes))\n      .reduce((acc, {nodeName, nodeValue}) => ({\n        ...acc,\n        [nodeName]: this.props.fill && nodeName === 'fill' ? this.props.fill : nodeValue,\n      }), {});\n    Object.assign(componentAtts, styleAtts);\n\n    return componentAtts;\n  }\n\n  inspectNode(node){\n      //Process the xml node\n      let arrayElements = [];\n\n      // Only process accepted elements\n      if (!ACEPTED_SVG_ELEMENTS.includes(node.nodeName))\n          return null;\n      // if have children process them.\n\n      // Recursive function.\n      if (node.childNodes && node.childNodes.length > 0){\n          for (let i = 0; i < node.childNodes.length; i++){\n              let nodo = this.inspectNode(node.childNodes[i]);\n              if (nodo != null)\n                  arrayElements.push(nodo);\n          }\n      }\n      let element = this.createSVGElement(node, arrayElements);\n      return element;\n  }\n\n\trender(){\n    try{\n        if (this.state.svgXmlData == null)\n            return null;\n\n        let inputSVG = this.state.svgXmlData.substring(this.state.svgXmlData.indexOf(\"<svg \"), (this.state.svgXmlData.indexOf(\"</svg>\") + 6));\n\n        let doc = new xmldom.DOMParser().parseFromString(inputSVG);\n\n        let rootSVG = this.inspectNode(doc.childNodes[0]);\n\n        return(\n            <View style={this.props.style}>\n              {rootSVG}\n            </View>\n        );\n    }catch(e){\n      console.error(\"ERROR SVG\", e);\n      return null;\n    }\n\t}\n}\n\nSvgUri.propTypes = {\n  fill: PropTypes.string,\n}\n\nmodule.exports = SvgUri;"]},"metadata":{},"sourceType":"module"}